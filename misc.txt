import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ListComparisonExample {

    public static void main(String[] args) {
        List<String> apiData = fetchDataFromApi();
        Set<String> dbData = new HashSet<>(fetchDataFromDb());

        for (String newData : apiData) {
            if (!dbData.contains(newData)) {
                insertIntoDb(newData);
                dbData.add(newData);  // Update the set to reflect the inserted data
            }
        }
    }

    private static List<String> fetchDataFromApi() {
        // Simulate fetching data from API
        List<String> apiData = List.of("Item1", "Item2", "Item3");
        return apiData;
    }

    private static List<String> fetchDataFromDb() {
        // Simulate fetching data from DB
        List<String> dbData = List.of("Item1", "Item2");
        return dbData;
    }

    private static void insertIntoDb(String newData) {
        // Implement your database insertion logic here
        System.out.println("Inserting into DB: " + newData);
        // You may want to use JDBC or an ORM framework for actual database interactions
    }
}




import java.util.ArrayList;
import java.util.List;

public class ListComparisonExample {

    public static void main(String[] args) {
        List<String> apiData = fetchDataFromApi();
        List<String> dbData = fetchDataFromDb();

        for (String newData : apiData) {
            if (!dbData.contains(newData)) {
                insertIntoDb(newData);
            }
        }
    }

    private static List<String> fetchDataFromApi() {
        // Simulate fetching data from API
        List<String> apiData = new ArrayList<>();
        apiData.add("Item1");
        apiData.add("Item2");
        apiData.add("Item3");
        return apiData;
    }

    private static List<String> fetchDataFromDb() {
        // Simulate fetching data from DB
        List<String> dbData = new ArrayList<>();
        dbData.add("Item1");
        dbData.add("Item2");
        return dbData;
    }

    private static void insertIntoDb(String newData) {
        // Implement your database insertion logic here
        System.out.println("Inserting into DB: " + newData);
        // You may want to use JDBC or an ORM framework for actual database interactions
    }
}





import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@SpringBootApplication
public class ListComparisonApplication implements CommandLineRunner {

    @Autowired
    private YourEntityRepository entityRepository;

    public static void main(String[] args) {
        SpringApplication.run(ListComparisonApplication.class, args);
    }

    @Override
    public void run(String... args) {
        List<YourData> apiData = fetchDataFromApi();
        Set<YourEntity> dbData = new HashSet<>(fetchDataFromDb());

        for (YourData newData : apiData) {
            // Check if data with the same functional area name exists in DB
            YourEntity existingEntity = dbData.stream()
                    .filter(entity -> entity.getFunctionalAreaName().equals(newData.getFunctionalAreaName()))
                    .findFirst().orElse(null);

            if (existingEntity != null) {
                // Data with the same functional area name exists in DB
                if (existingEntity.getIsActive().equals("N")) {
                    // If isActive is "N" in DB, update it to "Y"
                    existingEntity.setIsActive("Y");
                    entityRepository.save(existingEntity);
                    System.out.println("Updating isActive to 'Y' in DB: " + newData);
                }
            } else {
                // Data with the same functional area name doesn't exist in DB, insert new data
                YourEntity newEntity = new YourEntity();
                newEntity.setFunctionalAreaName(newData.getFunctionalAreaName());
                newEntity.setIsActive("Y"); // Assuming default is "Y" for new entries
                entityRepository.save(newEntity);
                System.out.println("Inserting into DB: " + newData);
            }
        }
    }

    private List<YourData> fetchDataFromApi() {
        // Simulate fetching data from API
        return List.of(
                new YourData("FunctionalArea1", "Y"),
                new YourData("FunctionalArea2", "N"),
                new YourData("FunctionalArea3", "Y")
        );
    }

    private List<YourEntity> fetchDataFromDb() {
        // Simulate fetching data from DB
        return entityRepository.findAll();
    }
}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.List;
import java.util.Map;

@SpringBootApplication
public class ListComparisonApplication implements CommandLineRunner {

    @Autowired
    private YourEntityRepository entityRepository;

    public static void main(String[] args) {
        SpringApplication.run(ListComparisonApplication.class, args);
    }

    @Override
    public void run(String... args) {
        List<Map<String, Object>> dbData = fetchDataFromDb();
        List<YourData> apiData = fetchDataFromApi();

        for (YourData newData : apiData) {
            boolean existsInDb = dbData.stream()
                    .anyMatch(row -> row.get("functionalAreaName").equals(newData.getFunctionalAreaName()));

            if (existsInDb) {
                // Data with the same functional area name exists in DB
                Map<String, Object> existingRow = dbData.stream()
                        .filter(row -> row.get("functionalAreaName").equals(newData.getFunctionalAreaName()))
                        .findFirst().orElse(null);

                if (existingRow != null && existingRow.get("isActive").equals("N")) {
                    // If isActive is "N" in DB, update it to "Y"
                    updateDbRow(existingRow, "Y");
                    System.out.println("Updating isActive to 'Y' in DB: " + newData);
                }
            } else {
                // Data with the same functional area name doesn't exist in DB, insert new data
                insertIntoDb(newData.getFunctionalAreaName(), "Y"); // Assuming default is "Y" for new entries
                System.out.println("Inserting into DB: " + newData);
            }
        }
    }

    private List<Map<String, Object>> fetchDataFromDb() {
        // Simulate fetching data from DB
        // Replace this with your actual method to fetch data from the database
        // For now, a dummy implementation is provided
        return List.of(
                Map.of("functionalAreaName", "FunctionalArea1", "isActive", "Y"),
                Map.of("functionalAreaName", "FunctionalArea2", "isActive", "N"),
                Map.of("functionalAreaName", "FunctionalArea3", "isActive", "Y")
        );
    }

    private void updateDbRow(Map<String, Object> row, String newIsActive) {
        // Simulate updating data in the database
        // Replace this with your actual method to update data in the database
        row.put("isActive", newIsActive);
    }

    private void insertIntoDb(String functionalAreaName, String isActive) {
        // Simulate inserting data into the database
        // Replace this with your actual method to insert data into the database
        System.out.println("Inserting into DB: " + functionalAreaName);
    }

    private List<YourData> fetchDataFromApi() {
        // Simulate fetching data from API
        return List.of(
                new YourData("FunctionalArea1", "Y"),
                new YourData("FunctionalArea2", "N"),
                new YourData("FunctionalArea3", "Y")
        );
    }
}




import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.List;
import java.util.Map;
import java.util.Optional;

@SpringBootApplication
public class ListComparisonApplication implements CommandLineRunner {

    @Autowired
    private YourEntityRepository entityRepository;

    public static void main(String[] args) {
        SpringApplication.run(ListComparisonApplication.class, args);
    }

    @Override
    public void run(String... args) {
        List<Map<String, Object>> dbData = fetchDataFromDb();
        List<String> apiData = fetchDataFromApi();

        for (String newFunctionalAreaName : apiData) {
            Optional<Map<String, Object>> matchingRow = findRowByFunctionalAreaName(dbData, newFunctionalAreaName);

            if (matchingRow.isPresent()) {
                Map<String, Object> existingRow = matchingRow.get();
                if (existingRow.get("isActive").equals("N")) {
                    // If isActive is "N" in DB, update it to "Y"
                    updateDbRow(existingRow, "Y");
                    System.out.println("Updating isActive to 'Y' in DB: " + newFunctionalAreaName);
                }
            } else {
                // Data with the same functional area name doesn't exist in DB, insert new data
                insertIntoDb(newFunctionalAreaName, "Y"); // Assuming default is "Y" for new entries
                System.out.println("Inserting into DB: " + newFunctionalAreaName);
            }
        }
    }

    private List<Map<String, Object>> fetchDataFromDb() {
        // Simulate fetching data from DB
        // Replace this with your actual method to fetch data from the database
        // For now, a dummy implementation is provided
        return List.of(
                Map.of("functionalAreaName", "FunctionalArea1", "isActive", "Y"),
                Map.of("functionalAreaName", "FunctionalArea2", "isActive", "N"),
                Map.of("functionalAreaName", "FunctionalArea3", "isActive", "Y")
        );
    }

    private void updateDbRow(Map<String, Object> row, String newIsActive) {
        // Simulate updating data in the database
        // Replace this with your actual method to update data in the database
        row.put("isActive", newIsActive);
    }

    private void insertIntoDb(String functionalAreaName, String isActive) {
        // Simulate inserting data into the database
        // Replace this with your actual method to insert data into the database
        System.out.println("Inserting into DB: " + functionalAreaName);
    }

    private Optional<Map<String, Object>> findRowByFunctionalAreaName(List<Map<String, Object>> dbData, String functionalAreaName) {
        return dbData.stream()
                .filter(row -> row.get("functionalAreaName").equals(functionalAreaName))
                .findFirst();
    }

    private List<String> fetchDataFromApi() {
        // Simulate fetching data from API
        return List.of("FunctionalArea1", "FunctionalArea2", "FunctionalArea3");
    }
}






import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@SpringBootApplication
public class ListComparisonApplication implements CommandLineRunner {

    @Autowired
    private YourEntityRepository entityRepository;

    public static void main(String[] args) {
        SpringApplication.run(ListComparisonApplication.class, args);
    }

    @Override
    public void run(String... args) {
        List<Map<String, Object>> dbData = fetchDataFromDb();
        List<String> apiData = fetchDataFromApi();

        Set<String> existingFunctionalAreas = new HashSet<>();
        for (Map<String, Object> row : dbData) {
            existingFunctionalAreas.add((String) row.get("functionalAreaName"));
        }

        for (String newFunctionalAreaName : apiData) {
            if (existingFunctionalAreas.contains(newFunctionalAreaName)) {
                // Data with the same functional area name exists in DB
                Map<String, Object> existingRow = findRowByFunctionalAreaName(dbData, newFunctionalAreaName);
                if (existingRow != null && existingRow.get("isActive").equals("N")) {
                    // If isActive is "N" in DB, update it to "Y"
                    updateDbRow(existingRow, "Y");
                    System.out.println("Updating isActive to 'Y' in DB: " + newFunctionalAreaName);
                }
            } else {
                // Data with the same functional area name doesn't exist in DB, insert new data
                insertIntoDb(newFunctionalAreaName, "Y"); // Assuming default is "Y" for new entries
                System.out.println("Inserting into DB: " + newFunctionalAreaName);
            }
        }
    }

    private List<Map<String, Object>> fetchDataFromDb() {
        // Simulate fetching data from DB
        // Replace this with your actual method to fetch data from the database
        // For now, a dummy implementation is provided
        return List.of(
                Map.of("functionalAreaName", "FunctionalArea1", "isActive", "Y"),
                Map.of("functionalAreaName", "FunctionalArea2", "isActive", "N"),
                Map.of("functionalAreaName", "FunctionalArea3", "isActive", "Y")
        );
    }

    private void updateDbRow(Map<String, Object> row, String newIsActive) {
        // Simulate updating data in the database
        // Replace this with your actual method to update data in the database
        row.put("isActive", newIsActive);
    }

    private void insertIntoDb(String functionalAreaName, String isActive) {
        // Simulate inserting data into the database
        // Replace this with your actual method to insert data into the database
        System.out.println("Inserting into DB: " + functionalAreaName);
    }

    private Map<String, Object> findRowByFunctionalAreaName(List<Map<String, Object>> dbData, String functionalAreaName) {
        return dbData.stream()
                .filter(row -> row.get("functionalAreaName").equals(functionalAreaName))
                .findFirst()
                .orElse(null);
    }

    private List<String> fetchDataFromApi() {
        // Simulate fetching data from API
        return List.of("FunctionalArea1", "FunctionalArea2", "FunctionalArea3");
    }
}






import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.List;

@SpringBootApplication
public class ListComparisonApplication implements CommandLineRunner {

    @Autowired
    private QlikRolesRepository qlikRolesRepository;

    public static void main(String[] args) {
        SpringApplication.run(ListComparisonApplication.class, args);
    }

    @Override
    public void run(String... args) {
        List<QlikRoles> dbData = fetchDataFromDb();
        List<String> apiData = fetchDataFromApi();

        for (String newFunctionalAreaName : apiData) {
            boolean existsInDb = dbData.stream()
                    .anyMatch(role -> role.getFunctionalAreaName().equals(newFunctionalAreaName));

            if (existsInDb) {
                // Data with the same functional area name exists in DB
                QlikRoles existingRole = findRoleByFunctionalAreaName(dbData, newFunctionalAreaName);
                if (existingRole != null && existingRole.getIsActive().equals("N")) {
                    // If isActive is "N" in DB, update it to "Y"
                    updateDbRole(existingRole, "Y");
                    System.out.println("Updating isActive to 'Y' in DB: " + newFunctionalAreaName);
                }
            } else {
                // Data with the same functional area name doesn't exist in DB, insert new data
                insertIntoDb(newFunctionalAreaName, "Y"); // Assuming default is "Y" for new entries
                System.out.println("Inserting into DB: " + newFunctionalAreaName);
            }
        }
    }

    private List<QlikRoles> fetchDataFromDb() {
        // Simulate fetching data from DB
        // Replace this with your actual method to fetch data from the database
        // For now, a dummy implementation is provided
        return List.of(
                new QlikRoles("FunctionalArea1", "Y"),
                new QlikRoles("FunctionalArea2", "N"),
                new QlikRoles("FunctionalArea3", "Y")
        );
    }

    private void updateDbRole(QlikRoles role, String newIsActive) {
        // Simulate updating data in the database
        // Replace this with your actual method to update data in the database
        role.setIsActive(newIsActive);
    }

    private void insertIntoDb(String functionalAreaName, String isActive) {
        // Simulate inserting data into the database
        // Replace this with your actual method to insert data into the database
        QlikRoles newRole = new QlikRoles(functionalAreaName, isActive);
        qlikRolesRepository.save(newRole);
        System.out.println("Inserting into DB: " + functionalAreaName);
    }

    private QlikRoles findRoleByFunctionalAreaName(List<QlikRoles> dbData, String functionalAreaName) {
        return dbData.stream()
                .filter(role -> role.getFunctionalAreaName().equals(functionalAreaName))
                .findFirst()
                .orElse(null);
    }

    private List<String> fetchDataFromApi() {
        // Simulate fetching data from API
        return List.of("FunctionalArea1", "FunctionalArea2", "FunctionalArea3");
    }
}


